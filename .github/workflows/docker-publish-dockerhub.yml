name: Build and Publish Docker Image to Docker Hub

on:
  repository_dispatch:
    types: [ telegram-bot-api-update ]
  push:
    branches:
      - main

env:
  REGISTRY: docker.io
  USERNAME: evilfreelancer
  REPOSITORY: docker-telegram-bot-api

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Check out Telegram Bot API repository
        uses: actions/checkout@v2
        with:
          repository: tdlib/telegram-bot-api
          path: telegram-bot-api

      - name: Log in to the Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get short commit SHA and full commit SHA
        run: |
          echo "SHORT_SHA=$(git --git-dir ./telegram-bot-api/.git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "FULL_SHA=$(git --git-dir ./telegram-bot-api/.git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Check if tag already exists in Docker Hub
        id: check_tag
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          URL="https://hub.docker.com/v2/repositories/${{ env.USERNAME }}/${{ env.REPOSITORY }}/tags/${{ env.SHORT_SHA }}"
          RESPONSE=$(curl -s -H "Authorization: JWT $DOCKERHUB_TOKEN" $URL)
          if echo $RESPONSE | grep -q "\"detail\":\"Object not found\""; then
            echo "tag_exists=true" >> $GITHUB_STATE
          else
            echo "tag_exists=false" >> $GITHUB_STATE
          fi

      - name: Build and push Docker image
        if: steps.check_tag.outputs.tag_exists != 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./telegram-bot-api
          dockerfile: ./telegram-bot-api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          build-args: TELEGRAM_API_REF=${{ env.FULL_SHA }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.REPOSITORY }}:${{ env.SHORT_SHA }}
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.REPOSITORY }}:latest
