name: Build and Publish Docker Image to GitHub Packages

on:
  repository_dispatch:
    types: [ telegram-bot-api-update ]
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  USERNAME: evilfreelancer
  REPOSITORY: docker-telegram-bot-api

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Check out Telegram Bot API repository
        uses: actions/checkout@v2
        with:
          repository: tdlib/telegram-bot-api
          path: telegram-bot-api

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short commit SHA and full commit SHA
        run: |
          echo "SHORT_SHA=$(git --git-dir ./telegram-bot-api/.git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "FULL_SHA=$(git --git-dir ./telegram-bot-api/.git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Check if tag already exists in GitHub Packages
        id: check_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          URL="https://api.github.com/repos/${{ env.USERNAME }}/${{ env.REPOSITORY }}/packages/container/${{ env.REPOSITORY }}/versions"
          TAGS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $URL | jq '.[].metadata.container.tags[]')
          if echo $TAGS | grep -q "\"${{ env.SHORT_SHA }}\""; then
            echo "::set-output name=tag_exists::true"
          else
            echo "::set-output name=tag_exists::false"
          fi

      - name: Build and push Docker image
        if: steps.check_tag.outputs.tag_exists != 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./telegram-bot-api
          push: ${{ github.event_name != 'pull_request' }}
          build-args: TELEGRAM_API_REF=${{ env.FULL_SHA }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.REPOSITORY }}:${{ env.SHORT_SHA }}
            ${{ env.REGISTRY }}/${{ env.USERNAME }}/${{ env.REPOSITORY }}:latest
